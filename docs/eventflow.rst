
*************
데이터의 흐름
*************


여기에서는 Swak 내부에서 데이터가 어떻게 생겨나고, 어떤 경로를 따라(Router) 처리되는지 살펴보겠다.

기본 개념
=========

이벤트(Event)
-------------

Swak에서 다루어야 할 데이터가 발생하는 것을 **이벤트** 라고 한다.

.. _event_tag:

데이터 태그(Data Tag)
----------------------

데이터의 분류를 위해 붙여준다. 태그는 단순한 문자열을 사용하거나, 매칭 패턴을 사용한다.

매칭 패턴
^^^^^^^^^

+---------------+---------------------------------+
| 리터럴        | 설명                            |
+===============+=================================+
| ``.``         | 태그 구분자                     |
+---------------+---------------------------------+
| ``*``         | 임의의 한 문자 또는 제로 매칭   |
+---------------+---------------------------------+
| ``**``        | 임의의 여러 문자 또는 제로 매칭 |
+---------------+---------------------------------+
| ``{a, b}``    | a 또는 b에 매칭                 |
+---------------+---------------------------------+
| ``ptr1 ptr2`` | ptr1 또는 ptr2에 매칭           |
+---------------+---------------------------------+

매칭 예시
^^^^^^^^^

+-------------------+-------------------+---------------+
| 패턴              | 매칭              | 비매칭        |
+===================+===================+===============+
| ``a*``            | ab, a             | a.b, ba       |
+-------------------+-------------------+---------------+
| ``*a*``           | bac, a            |               |
+-------------------+-------------------+---------------+
| ``a.*``           | a.b               | ab            |
+-------------------+-------------------+---------------+
| ``a.*.c``         | a.b.c, a.c.c      | a.c           |
+-------------------+-------------------+---------------+
| ``a.**``          | a a.b             | ab, abc, ab.c |
+-------------------+-------------------+---------------+
| ``a**``           | a, ab, a.b ab.d.e |               |
+-------------------+-------------------+---------------+
| ``**.a``          | a, b.a, cb.a      | ba, c.ba      |
+-------------------+-------------------+---------------+
| ``a.{b,c}``       | a.b, a.c          | a.d           |
+-------------------+-------------------+---------------+
| ``a.b a.c``       | a.b, a.c          | a.d           |
+-------------------+-------------------+---------------+
| ``a.b.** a.c.**`` | a.b, a.c          | a.d, a.cd     |
+-------------------+-------------------+---------------+


데이터 라우터(Data Router)
===========================

데이터 라우터는 플러그인에서 데이터 스트림을 받고, 등록된 룰에 따라 이벤트를 플러그인에게 배분하는 역할을 한다. 먼저 구성 요소에 대해 알아보자.


룰(Rule)
--------

데이터 라우터의 룰은 이벤트의 흐름을 결정하는데, 패턴과 컬렉터로 구성된다. 패턴은 앞에서 소개한 데이터 태그의 패턴을 말하고, 컬렉터는 변경 또는 출력 플러그인을 말한다.

파이프라인(Pipeline)
--------------------

데이터 라우터에 등록된 룰들로 순서대로 파이프라인을 구성한다. 파이프라인은 이벤트의 빠른 처리를 위해 태그에 맞는 룰 들을 미리 저장해두는 역할이다.

파이프라인은 선택적으로 하나 이상의 변경 플러그인으로 시작하고, 출력 플러그인으로 끝난다.


데이터 라우터의 동작
--------------------

데이터 라우터는 다음과 같이 동작한다:

1. 입력 플러그인의 ``read`` 메소드 호출
2. 입력 플러그인은 새 데이터를 읽거나 생성하고, 하나 이상의 데이터를 ``DataStream`` 에 넣어 반환한다.
3. 이 스트림과 입력 플러그인의 태그를 인자로 데이터 라우터의 ``emit_stream`` 메소드 호출.
4. 데이터 라우터는 데이터 태그와 매칭되는 파이프라인을 찾는다.
  - 태그에 매칭되는 기존 파이프라인이 없다면, 새 파이프라인을 만든다.
  - 이때 데이터 라우터에 등록된 규칙(Rule)들 중 태그에 맞는 것을 파이프 라인에 변경 플러그인와 출력 플러그인으로 구분하여 저장한다.
5. 데이터 라우터는 파이프라인의 ``emit_stream`` 메소드를 호출해 이벤트를 파이프라인으로 보낸다.
6. 파이프라인의 변경 플러그인을 통해 이벤트 변경
7. 파이프라인의 출력 플러그인의 ``emit_stream`` 메소드를 통해 이벤트 출력.

.. note:: 입력 플러그이 아닌 플러그인의 테스트 코드를 작성할 때는 입력 플러그인 없이 라우터의 ``emit`` 메소드를 바로 부르면 간편하다.



데이터 스트림
-------------

데이터 스트림은 데이터와 그것의 발생 시간을 가지는 컨테이너이다. Swak 내부적으로 데이터는 데이터 스트림화 되어 사용된다. 아래와 같은 것들이 있다.

- **OneDataStream** - 이벤트 하나를 가지는 스트림
- **MultiDataStream** - 하나 이상의 이벤트를 가지는 스트림

데이터 스트림의 내용물
^^^^^^^^^^^^^^^^^^^^^^

데이터 스트림에는 다음과 같은 쌍이 하나 이상 들어간다.

- time: 데이터가 발생한 시간
- data: 데이터의 내용(파싱된 경우 ``dict`` 형, 파싱되지 않았으면 ``str`` 형)


OneDataStream
^^^^^^^^^^^^^^

데이터 하나를 가지는 스트림


MultiDataStream
^^^^^^^^^^^^^^^^

복수의 데이터를 가지는 스트림. 많은 데이터를 다룰 때 효율적.


외부 프로세스 호출
------------------

외부 프로세스 호출 흐름
^^^^^^^^^^^^^^^^^^^^^^^

외부 실행파일이나 스크립트를 실행할 수 있다. 단, 그것들은 입력 파일명과 출력 파일명을 인자로 받아 실행하도록 구성되어야 한다.

.. image:: _static/process_flow.png
    :width: 700px
